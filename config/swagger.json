{
  "swagger": "2.0",
  "info": {
    "description": "Documentation for the Beacon API",
    "version": "1.0.0",
    "title": "Beacon API"
  },
  "host": "kcdc-beacon-api.herokuapp.com",
  "basePath": "/",
  "tags": [
    {
      "name": "beacons"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/beacons": {
      "post": {
        "tags": [
          "beacons"
        ],
        "summary": "Create a beacon",
        "description": "AUTHORIZED",
        "operationId": "createBeacon",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Beacon"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful creation",
            "schema": {
              "$ref": "#/definitions/Beacon"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "get": {
        "tags": [
          "beacons"
        ],
        "summary": "Get all beacons",
        "description": "",
        "operationId": "getAllBeacons",
        "produces": [
          "application/json"
        ],
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "successful retrieval",
            "schema": {
              "$ref": "#/definitions/Beacon"
            }
          }
        }
      }
    },
    "/beacons/{beaconMinorId}": {
      "get": {
        "tags": [
          "beacons"
        ],
        "summary": "Get beacon by id",
        "description": "",
        "operationId": "getBeaconById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "beaconMinorId",
            "in": "path",
            "description": "ID of beacon that needs to be fetched",
            "required": true,
            "type": "string",
            "maximum": 12,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Beacon"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Beacon not found"
          }
        }
      },
      "delete": {
        "tags": [
          "beacons"
        ],
        "summary": "Delete beacon by id",
        "description": "AUTHORIZED",
        "operationId": "deleteBeaconById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "beaconMinorId",
            "in": "path",
            "description": "ID of beacon that needs to be deleted",
            "required": true,
            "type": "string",
            "maximum": 12,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Beacon not found"
          }
        }
      }
    },
    "/beacons/{beaconMinorId}/visits": {
      "get": {
        "tags": [
          "beacons",
          "visits"
        ],
        "summary": "Get all visits to a beacon",
        "description": "",
        "operationId": "getAllBeaconVisits",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "beaconMinorId",
            "in": "path",
            "description": "ID of beacon whose visits you wish to see",
            "required": true,
            "type": "string",
            "maximum": 12,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Visit"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Beacon not found"
          }
        }
      },
      "delete": {
        "tags": [
          "beacons",
          "visits"
        ],
        "summary": "Delete all of a beacon's visits",
        "description": "",
        "operationId": "deleteBeaconById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "beaconMinorId",
            "in": "path",
            "description": "ID of beacon that needs to be deleted",
            "required": true,
            "type": "string",
            "maximum": 12,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Beacon not found"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a user",
        "description": "AUTHORIZED",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful creation, without location header. A new or updated key is in the body.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get all users",
        "description": "",
        "operationId": "getAllUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "successful retrieval",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/users/login": {
      "tags": [
        "users"
      ],
      "summary": "Login a user",
      "description": "",
      "operationId": "login",
      "produces": [
        "application/json"
      ],
      "parameters": [
      ],
      "responses": {
        "200": {
          "description": "Successfully logged in.",
          "schema": {
            "$ref": "#/definitions/User"
          }
        },
        "401": {
          "description": "Unauthenticated"
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user by id",
        "description": "",
        "operationId": "getUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user that needs to be fetched",
            "required": true,
            "type": "string",
            "maximum": 12,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete user by id",
        "description": "",
        "operationId": "deleteUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user that needs to be deleted",
            "required": true,
            "type": "string",
            "maximum": 12,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{userId}/visits": {
      "get": {
        "tags": [
          "users",
          "visits"
        ],
        "summary": "Get all of a user's visits",
        "description": "",
        "operationId": "getVisitedBeacons",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user whose visits you wish to see",
            "required": true,
            "type": "string",
            "maximum": 12,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Visit"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "users",
          "visits"
        ],
        "summary": "Delete all of a user's visits",
        "description": "AUTHORIZED",
        "operationId": "deleteUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user that needs to be deleted",
            "required": true,
            "type": "string",
            "maximum": 12,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{userId}/visits/{beaconMinorId}": {
      "get": {
        "tags": [
          "visits",
          "users"
        ],
        "summary": "Gets an instance of a particular visit",
        "description": "",
        "operationId": "getVisitByVisitId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to retrieve",
            "required": true,
            "type": "string",
            "maximum": 12,
            "minimum": 1
          },
          {
            "name": "beaconMinorId",
            "in": "path",
            "description": "ID of the visit to retrieve",
            "required": true,
            "type": "string",
            "maximum": 12,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Visit"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "visits",
          "users"
        ],
        "summary": "Delete visit by visit id",
        "description": "",
        "operationId": "deleteVisitByVisitId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to retrieve",
            "required": true,
            "type": "string",
            "maximum": 12,
            "minimum": 1
          },
          {
            "name": "beaconMinorId",
            "in": "path",
            "description": "ID of the visit to be deleted",
            "required": true,
            "type": "string",
            "maximum": 12,
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
  },
  "definitions": {
    "Beacon": {
      "type": "object",
      "properties": {
        "BeaconMinorId": {
          "type": "string",
          "description": "also known as the minor id"
        },
        "BeaconMajorId": {
          "type": "string"
        },
        "UUID": {
          "type": "string"
        },
        "Manufacturer": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Beacon"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "Email": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Visit": {
      "type": "object",
      "properties": {
        "BeaconMinorId": {
          "type": "string",
          "description": "also known as the minor id"
        },
        "UserId": {
          "type": "string"
        },
        "VisitedTimestamp": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Visit"
      }
    }
  }
}
